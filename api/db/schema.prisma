datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                String       @id @default(cuid())
  email             String       @unique
  hashedPassword    String
  salt              String
  firstName         String?
  lastName          String?
  phoneNumber       String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  memberships       Membership[]
  globalSettings    Json? // User's global preferences
  assignment        Assignment[]
  event             Event[]
  lastLoginAt       DateTime?
  loginAttempts     Int          @default(0)
  isLocked          Boolean      @default(false)
  passwordChangedAt DateTime?
  media             Media[]
}

model Organization {
  id                     String                   @id @default(cuid())
  name                   String
  createdAt              DateTime                 @default(now())
  users                  Membership[]
  sites                  Site[]
  settings               Json? // Stores settings specific to the organization
  billingEmail           String?
  stripeCustomerId       String?
  inspection             Inspection[]
  event                  Event[]
  membershipRole         MembershipRole[]
  media                  Media[]
  inspectionEventDetails InspectionEventDetails[]
  assignment             Assignment[]
  permission             Permission[]
}

model Membership {
  id                  String            @id @default(cuid())
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  organization        Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId      String
  roles               MembershipRole[]
  settings            Json? // Per-organization user-specific settings
  status              MembershipStatus
  invitationId        String?           @default(dbgenerated("concat('manual-join-', gen_random_uuid())"))
  invitedEmail        String?
  invitationExpiresAt DateTime?
  invitedAt           DateTime?
  joinedAt            DateTime?
  invitationAttempts  Int               @default(0)
  lastInvitationSent  DateTime?
  invitationChannel   InvitationChannel

  @@unique([userId, organizationId])
  @@unique([invitationId, organizationId])
  @@index([organizationId])
}

model MembershipRole {
  id             String       @id @default(cuid())
  name           String       @unique
  membership     Membership[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  permission     Permission?  @relation(fields: [permissionId], references: [id])
  permissionId   String?

  @@index([organizationId])
}

model Permission {
  id             String           @id @default(cuid())
  name           String // Name of the permission (e.g., "READ", "WRITE")
  description    String? // Optional description
  scope          PermissionScope // Enum for scope (e.g., ORGANIZATION, SITE, etc.)
  conditions     Json? // Optional JSON to specify dynamic conditions (e.g., `{ "resourceId": "xyz" }`)
  membershipRole MembershipRole[] // Links to roles
  organization   Organization?    @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@unique([name, scope])
  @@index([organizationId])
}

enum PermissionScope {
  ORGANIZATION
  SITE
  GLOBAL
}

enum InvitationChannel {
  EMAIL
  SLACK
  INTERNAL
  EXTERNAL
}

enum MembershipStatus {
  INVITED
  ACTIVE
  SUSPENDED
  PENDING
}

model Site {
  id             String       @id @default(cuid())
  name           String
  deletedAt      DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  metadata       Json?
  currentData    Json?
  assignments    Assignment[]
  events         Event[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  inspection     Inspection[]

  @@index([deletedAt])
  @@index([organizationId])
}

model Assignment {
  id             String       @id @default(cuid())
  site           Site         @relation(fields: [siteId], references: [id])
  siteId         String
  member         Membership   @relation(fields: [membershipId], references: [id])
  membershipId   String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@unique([userId, siteId])
  @@index([organizationId, userId])
}

model Event {
  id             String       @id @default(cuid())
  type           EventType
  site           Site         @relation(fields: [siteId], references: [id])
  siteId         String
  membership     Membership   @relation(fields: [membershipId], references: [id])
  membershipId   String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  details        Json?
  createdAt      DateTime     @default(now())
  media          Media[]
  metadata       Json?

  inspectionEventDetails InspectionEventDetails?
  inspection             Inspection?             @relation(fields: [inspectionId], references: [id])
  inspectionId           String?
  eventTag               EventTag[]

  @@index([organizationId, type, createdAt])
  @@index([membershipId, type])
  @@index([siteId, createdAt])
}

model EventTag {
  id      String @id @default(cuid())
  eventId String
  tag     String
  event   Event  @relation(fields: [eventId], references: [id])

  @@unique([eventId, tag]) // Prevent duplicate tagging.
}

model InspectionEventDetails {
  id             String       @id @default(cuid())
  statusChange   Json?
  event          Event        @relation(fields: [eventId], references: [id])
  eventId        String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@index([organizationId])
}

enum EventType {
  SITE_TYPE_CREATED
  SITE_TYPE_UPDATED
  SITE_TYPE_DELETED
  BMP_CREATED
  BMP_UPDATED
  BMP_DELETED
  ROLE_CREATED
  ROLE_UPDATED
  ROLE_DELETED
  MEDIA_UPLOADED
}

model Inspection {
  id             String       @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  site           Site         @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId         String
  events         Event[]
  currentState   Json?

  @@index([organizationId, siteId])
}

model Media {
  id             String       @id @default(cuid())
  url            String
  description    String?
  inspection     Inspection?  @relation(fields: [inspectionId], references: [id])
  inspectionId   String?
  site           Site         @relation(fields: [siteId], references: [id])
  siteId         String?
  Event          Event?       @relation(fields: [eventId], references: [id])
  eventId        String?
  type           MediaType
  fileSize       Int?
  mimeType       String?
  uploadedBy     Membership?  @relation(fields: [membershipId], references: [id])
  membershipId   String?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@index([organizationId])
}

enum MediaType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
}

model AuditLog {
  id            String      @id @default(cuid())
  member        Membership? @relation(fields: [membershipId], references: [id])
  membershipId  String?
  action        String
  resourceType  String
  resourceId    String
  changes       Json?
  ipAddress     String?
  deviceDetails Json?
  createdAt     DateTime    @default(now())
}
