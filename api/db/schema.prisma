// schema.prisma
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                  Int          @id @default(autoincrement())
  email               String       @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  firstName           String?
  lastName            String?
  phoneNumber         String?
  role                Role         @relation(fields: [roleId], references: [id])
  roleId              Int
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  inspections         Inspection[]
  sites               Site[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Site {
  id              Int          @id @default(autoincrement())
  name            String
  addressLine1    String
  addressLine2    String?
  city            String?
  state           String?
  postalCode      String?
  country         String?
  npdesTrackingNo String?
  siteType        SiteType     @relation(fields: [siteTypeId], references: [id])
  siteTypeId      Int
  siteInspector   String?
  siteMap         String?
  ownerName       String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  inspections     Inspection[]
  bmps            Bmp[]
  User            User?        @relation(fields: [userId], references: [id])
  userId          Int?
}

model SiteType {
  id    Int    @id @default(autoincrement())
  name  String @unique
  sites Site[]
}

model Inspection {
  id                       Int       @id @default(autoincrement())
  site                     Site      @relation(fields: [siteId], references: [id])
  siteId                   Int
  inspector                User      @relation(fields: [inspectorId], references: [id])
  inspectorId              Int
  date                     DateTime
  startTime                DateTime
  endTime                  DateTime
  permitOnSite             Boolean
  swpppOnSite              Boolean
  bmpsInstalledPerSwppp    Boolean
  siteInspectionReports    Boolean
  inspectionType           String
  title                    String
  description              String
  severity                 String
  violationsNotes          String?
  whomToContact            String?
  newStormEvent            Boolean
  stormDateTime            DateTime?
  stormDuration            String?
  approximatePrecipitation Float?
  weatherAtTime            String
  temperature              Float?
  previousDischarge        Boolean
  newDischarges            Boolean
  dischargeAtThisTime      Boolean
  currentDischarges        Boolean
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  bmpData                  BmpData[]
  media                    Media[]
}

model Bmp {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  isStandard  Boolean
  site        Site?     @relation(fields: [siteId], references: [id])
  siteId      Int?
  bmpData     BmpData[]
}

model BmpData {
  id                     Int        @id @default(autoincrement())
  bmp                    Bmp        @relation(fields: [bmpId], references: [id])
  bmpId                  Int
  inspection             Inspection @relation(fields: [inspectionId], references: [id])
  inspectionId           Int
  implemented            Boolean?
  maintenanceRequired    Boolean?
  repeatOccurrence       Boolean?
  correctiveActionNeeded String?
  notes                  String?

  @@unique([bmpId, inspectionId])
}

model Media {
  id           Int        @id @default(autoincrement())
  inspection   Inspection @relation(fields: [inspectionId], references: [id])
  inspectionId Int
  url          String
  description  String
}
